// Mocks generated by Mockito 5.0.16 from annotations
// in food_order_app/test/features/accounting/data/dataSource/account_data_source_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:gotrue/src/gotrue_api.dart' as _i5;
import 'package:gotrue/src/subscription.dart' as _i10;
import 'package:http/http.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:supabase/src/supabase_realtime_client.dart' as _i3;
import 'package:supabase/src/supabase_realtime_payload.dart' as _i8;
import 'package:supabase/src/supabase_stream_builder.dart' as _i4;
import 'package:supabase/supabase.dart' as _i2;
import 'package:supabase_flutter/src/supabase.dart' as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSupabaseClient_0 extends _i1.Fake implements _i2.SupabaseClient {}

class _FakeGoTrueClient_1 extends _i1.Fake implements _i2.GoTrueClient {}

class _FakeRealtimeClient_2 extends _i1.Fake implements _i2.RealtimeClient {}

class _FakeSupabaseStorageClient_3 extends _i1.Fake
    implements _i2.SupabaseStorageClient {}

class _FakeSupabaseQueryBuilder_4 extends _i1.Fake
    implements _i2.SupabaseQueryBuilder {}

class _FakePostgrestTransformBuilder_5<T> extends _i1.Fake
    implements _i2.PostgrestTransformBuilder<T> {}

class _FakeUri_6 extends _i1.Fake implements Uri {}

class _FakeSupabaseRealtimeClient_7 extends _i1.Fake
    implements _i3.SupabaseRealtimeClient {}

class _FakeSupabaseStreamBuilder_8 extends _i1.Fake
    implements _i4.SupabaseStreamBuilder {}

class _FakePostgrestFilterBuilder_9 extends _i1.Fake
    implements _i2.PostgrestFilterBuilder {}

class _FakePostgrestBuilder_10 extends _i1.Fake
    implements _i2.PostgrestBuilder {}

class _FakePostgrestResponse_11 extends _i1.Fake
    implements _i2.PostgrestResponse {}

class _FakeGoTrueApi_12 extends _i1.Fake implements _i5.GoTrueApi {}

class _FakeGotrueSessionResponse_13 extends _i1.Fake
    implements _i2.GotrueSessionResponse {}

class _FakeSession_14 extends _i1.Fake implements _i2.Session {}

class _FakeGotrueUserResponse_15 extends _i1.Fake
    implements _i2.GotrueUserResponse {}

class _FakeGotrueResponse_16 extends _i1.Fake implements _i2.GotrueResponse {}

class _FakeGotrueSubscription_17 extends _i1.Fake
    implements _i2.GotrueSubscription {}

/// A class which mocks [Supabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabase extends _i1.Mock implements _i6.Supabase {
  MockSupabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SupabaseClient get client =>
      (super.noSuchMethod(Invocation.getter(#client),
          returnValue: _FakeSupabaseClient_0()) as _i2.SupabaseClient);
  @override
  set client(_i2.SupabaseClient? _client) =>
      super.noSuchMethod(Invocation.setter(#client, _client),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void log(String? msg) => super.noSuchMethod(Invocation.method(#log, [msg]),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SupabaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClient extends _i1.Mock implements _i2.SupabaseClient {
  MockSupabaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get supabaseUrl =>
      (super.noSuchMethod(Invocation.getter(#supabaseUrl), returnValue: '')
          as String);
  @override
  String get supabaseKey =>
      (super.noSuchMethod(Invocation.getter(#supabaseKey), returnValue: '')
          as String);
  @override
  String get schema =>
      (super.noSuchMethod(Invocation.getter(#schema), returnValue: '')
          as String);
  @override
  String get restUrl =>
      (super.noSuchMethod(Invocation.getter(#restUrl), returnValue: '')
          as String);
  @override
  String get realtimeUrl =>
      (super.noSuchMethod(Invocation.getter(#realtimeUrl), returnValue: '')
          as String);
  @override
  String get authUrl =>
      (super.noSuchMethod(Invocation.getter(#authUrl), returnValue: '')
          as String);
  @override
  String get storageUrl =>
      (super.noSuchMethod(Invocation.getter(#storageUrl), returnValue: '')
          as String);
  @override
  _i2.GoTrueClient get auth => (super.noSuchMethod(Invocation.getter(#auth),
      returnValue: _FakeGoTrueClient_1()) as _i2.GoTrueClient);
  @override
  set auth(_i2.GoTrueClient? _auth) =>
      super.noSuchMethod(Invocation.setter(#auth, _auth),
          returnValueForMissingStub: null);
  @override
  _i2.RealtimeClient get realtime =>
      (super.noSuchMethod(Invocation.getter(#realtime),
          returnValue: _FakeRealtimeClient_2()) as _i2.RealtimeClient);
  @override
  set realtime(_i2.RealtimeClient? _realtime) =>
      super.noSuchMethod(Invocation.setter(#realtime, _realtime),
          returnValueForMissingStub: null);
  @override
  _i2.SupabaseStorageClient get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
              returnValue: _FakeSupabaseStorageClient_3())
          as _i2.SupabaseStorageClient);
  @override
  _i2.SupabaseQueryBuilder from(String? table) => (super.noSuchMethod(
      Invocation.method(#from, [table]),
      returnValue: _FakeSupabaseQueryBuilder_4()) as _i2.SupabaseQueryBuilder);
  @override
  _i2.PostgrestTransformBuilder<dynamic> rpc(String? fn,
          {Map<String, dynamic>? params}) =>
      (super.noSuchMethod(Invocation.method(#rpc, [fn], {#params: params}),
              returnValue: _FakePostgrestTransformBuilder_5<dynamic>())
          as _i2.PostgrestTransformBuilder<dynamic>);
  @override
  _i7.Future<int> removeSubscription(_i2.RealtimeSubscription? subscription) =>
      (super.noSuchMethod(
          Invocation.method(#removeSubscription, [subscription]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  List<_i2.RealtimeSubscription> getSubscriptions() =>
      (super.noSuchMethod(Invocation.method(#getSubscriptions, []),
              returnValue: <_i2.RealtimeSubscription>[])
          as List<_i2.RealtimeSubscription>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SupabaseQueryBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseQueryBuilder extends _i1.Mock
    implements _i2.SupabaseQueryBuilder {
  MockSupabaseQueryBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set body(dynamic _body) => super.noSuchMethod(Invocation.setter(#body, _body),
      returnValueForMissingStub: null);
  @override
  List<dynamic> get query =>
      (super.noSuchMethod(Invocation.getter(#query), returnValue: <dynamic>[])
          as List<dynamic>);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  bool get maybeEmpty =>
      (super.noSuchMethod(Invocation.getter(#maybeEmpty), returnValue: false)
          as bool);
  @override
  set maybeEmpty(bool? _maybeEmpty) =>
      super.noSuchMethod(Invocation.setter(#maybeEmpty, _maybeEmpty),
          returnValueForMissingStub: null);
  @override
  set method(String? _method) =>
      super.noSuchMethod(Invocation.setter(#method, _method),
          returnValueForMissingStub: null);
  @override
  Uri get url =>
      (super.noSuchMethod(Invocation.getter(#url), returnValue: _FakeUri_6())
          as Uri);
  @override
  set url(Uri? _url) => super.noSuchMethod(Invocation.setter(#url, _url),
      returnValueForMissingStub: null);
  @override
  _i3.SupabaseRealtimeClient on(_i2.SupabaseEventTypes? event,
          void Function(_i8.SupabaseRealtimePayload)? callback) =>
      (super.noSuchMethod(Invocation.method(#on, [event, callback]),
              returnValue: _FakeSupabaseRealtimeClient_7())
          as _i3.SupabaseRealtimeClient);
  @override
  _i4.SupabaseStreamBuilder stream() =>
      (super.noSuchMethod(Invocation.method(#stream, []),
              returnValue: _FakeSupabaseStreamBuilder_8())
          as _i4.SupabaseStreamBuilder);
  @override
  _i2.PostgrestFilterBuilder select([String? columns = r'*']) =>
      (super.noSuchMethod(Invocation.method(#select, [columns]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestBuilder insert(dynamic values,
          {_i2.ReturningOption? returning = _i2.ReturningOption.representation,
          bool? upsert = false,
          String? onConflict}) =>
      (super.noSuchMethod(
          Invocation.method(#insert, [
            values
          ], {
            #returning: returning,
            #upsert: upsert,
            #onConflict: onConflict
          }),
          returnValue: _FakePostgrestBuilder_10()) as _i2.PostgrestBuilder);
  @override
  _i2.PostgrestBuilder upsert(dynamic values,
          {_i2.ReturningOption? returning = _i2.ReturningOption.representation,
          String? onConflict,
          bool? ignoreDuplicates = false}) =>
      (super.noSuchMethod(
          Invocation.method(#upsert, [
            values
          ], {
            #returning: returning,
            #onConflict: onConflict,
            #ignoreDuplicates: ignoreDuplicates
          }),
          returnValue: _FakePostgrestBuilder_10()) as _i2.PostgrestBuilder);
  @override
  _i2.PostgrestFilterBuilder update(Map<dynamic, dynamic>? values,
          {_i2.ReturningOption? returning =
              _i2.ReturningOption.representation}) =>
      (super.noSuchMethod(
              Invocation.method(#update, [values], {#returning: returning}),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder delete(
          {_i2.ReturningOption? returning =
              _i2.ReturningOption.representation}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [], {#returning: returning}),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i7.Future<_i2.PostgrestResponse> execute(
          {bool? head = false, _i2.CountOption? count}) =>
      (super.noSuchMethod(
              Invocation.method(#execute, [], {#head: head, #count: count}),
              returnValue: Future<_i2.PostgrestResponse>.value(
                  _FakePostgrestResponse_11()))
          as _i7.Future<_i2.PostgrestResponse>);
  @override
  _i2.PostgrestResponse parseResponse(_i9.Response? response) =>
      (super.noSuchMethod(Invocation.method(#parseResponse, [response]),
          returnValue: _FakePostgrestResponse_11()) as _i2.PostgrestResponse);
  @override
  _i2.PostgrestResponse handleMaybeEmptyError(
          _i9.Response? response, _i2.PostgrestError? error) =>
      (super.noSuchMethod(
          Invocation.method(#handleMaybeEmptyError, [response, error]),
          returnValue: _FakePostgrestResponse_11()) as _i2.PostgrestResponse);
  @override
  void appendSearchParams(String? key, String? value) =>
      super.noSuchMethod(Invocation.method(#appendSearchParams, [key, value]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PostgrestFilterBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostgrestFilterBuilder extends _i1.Mock
    implements _i2.PostgrestFilterBuilder {
  MockPostgrestFilterBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PostgrestFilterBuilder Function(String, dynamic) get cs =>
      (super.noSuchMethod(Invocation.getter(#cs),
          returnValue: (String __p0, dynamic __p1) =>
              _FakePostgrestFilterBuilder_9()) as _i2.PostgrestFilterBuilder
          Function(String, dynamic));
  @override
  _i2.PostgrestFilterBuilder Function(String, dynamic) get cd =>
      (super.noSuchMethod(Invocation.getter(#cd),
          returnValue: (String __p0, dynamic __p1) =>
              _FakePostgrestFilterBuilder_9()) as _i2.PostgrestFilterBuilder
          Function(String, dynamic));
  @override
  _i2.PostgrestFilterBuilder Function(String, String) get sl =>
      (super.noSuchMethod(Invocation.getter(#sl),
          returnValue: (String __p0, String __p1) =>
              _FakePostgrestFilterBuilder_9()) as _i2.PostgrestFilterBuilder
          Function(String, String));
  @override
  _i2.PostgrestFilterBuilder Function(String, String) get sr =>
      (super.noSuchMethod(Invocation.getter(#sr),
          returnValue: (String __p0, String __p1) =>
              _FakePostgrestFilterBuilder_9()) as _i2.PostgrestFilterBuilder
          Function(String, String));
  @override
  _i2.PostgrestFilterBuilder Function(String, String) get nxl =>
      (super.noSuchMethod(Invocation.getter(#nxl),
          returnValue: (String __p0, String __p1) =>
              _FakePostgrestFilterBuilder_9()) as _i2.PostgrestFilterBuilder
          Function(String, String));
  @override
  _i2.PostgrestFilterBuilder Function(String, String) get nxr =>
      (super.noSuchMethod(Invocation.getter(#nxr),
          returnValue: (String __p0, String __p1) =>
              _FakePostgrestFilterBuilder_9()) as _i2.PostgrestFilterBuilder
          Function(String, String));
  @override
  _i2.PostgrestFilterBuilder Function(String, String) get adj =>
      (super.noSuchMethod(Invocation.getter(#adj),
          returnValue: (String __p0, String __p1) =>
              _FakePostgrestFilterBuilder_9()) as _i2.PostgrestFilterBuilder
          Function(String, String));
  @override
  _i2.PostgrestFilterBuilder Function(String, String) get ov =>
      (super.noSuchMethod(Invocation.getter(#ov),
          returnValue: (String __p0, String __p1) =>
              _FakePostgrestFilterBuilder_9()) as _i2.PostgrestFilterBuilder
          Function(String, String));
  @override
  set body(dynamic _body) => super.noSuchMethod(Invocation.setter(#body, _body),
      returnValueForMissingStub: null);
  @override
  List<dynamic> get query =>
      (super.noSuchMethod(Invocation.getter(#query), returnValue: <dynamic>[])
          as List<dynamic>);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  bool get maybeEmpty =>
      (super.noSuchMethod(Invocation.getter(#maybeEmpty), returnValue: false)
          as bool);
  @override
  set maybeEmpty(bool? _maybeEmpty) =>
      super.noSuchMethod(Invocation.setter(#maybeEmpty, _maybeEmpty),
          returnValueForMissingStub: null);
  @override
  set method(String? _method) =>
      super.noSuchMethod(Invocation.setter(#method, _method),
          returnValueForMissingStub: null);
  @override
  Uri get url =>
      (super.noSuchMethod(Invocation.getter(#url), returnValue: _FakeUri_6())
          as Uri);
  @override
  set url(Uri? _url) => super.noSuchMethod(Invocation.setter(#url, _url),
      returnValueForMissingStub: null);
  @override
  _i2.PostgrestFilterBuilder not(
          String? column, String? operator, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#not, [column, operator, value]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder or(String? filters) =>
      (super.noSuchMethod(Invocation.method(#or, [filters]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder eq(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#eq, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder neq(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#neq, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder gt(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#gt, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder gte(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#gte, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder lt(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#lt, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder lte(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#lte, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder like(String? column, String? pattern) =>
      (super.noSuchMethod(Invocation.method(#like, [column, pattern]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder ilike(String? column, String? pattern) =>
      (super.noSuchMethod(Invocation.method(#ilike, [column, pattern]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder is_(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#is_, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder in_(String? column, List<dynamic>? values) =>
      (super.noSuchMethod(Invocation.method(#in_, [column, values]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder contains(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#contains, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder containedBy(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#containedBy, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder rangeLt(String? column, String? range) =>
      (super.noSuchMethod(Invocation.method(#rangeLt, [column, range]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder rangeGt(String? column, String? range) =>
      (super.noSuchMethod(Invocation.method(#rangeGt, [column, range]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder rangeGte(String? column, String? range) =>
      (super.noSuchMethod(Invocation.method(#rangeGte, [column, range]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder rangeLte(String? column, String? range) =>
      (super.noSuchMethod(Invocation.method(#rangeLte, [column, range]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder rangeAdjacent(String? column, String? range) =>
      (super.noSuchMethod(Invocation.method(#rangeAdjacent, [column, range]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder overlaps(String? column, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#overlaps, [column, value]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder textSearch(String? column, String? query,
          {String? config, _i2.TextSearchType? type}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #textSearch, [column, query], {#config: config, #type: type}),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder fts(String? column, String? query,
          {String? config}) =>
      (super.noSuchMethod(
              Invocation.method(#fts, [column, query], {#config: config}),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder plfts(String? column, String? query,
          {String? config}) =>
      (super.noSuchMethod(
              Invocation.method(#plfts, [column, query], {#config: config}),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder phfts(String? column, String? query,
          {String? config}) =>
      (super.noSuchMethod(
              Invocation.method(#phfts, [column, query], {#config: config}),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder wfts(String? column, String? query,
          {String? config}) =>
      (super.noSuchMethod(
              Invocation.method(#wfts, [column, query], {#config: config}),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder filter(
          String? column, String? operator, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#filter, [column, operator, value]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestFilterBuilder match(Map<dynamic, dynamic>? query) =>
      (super.noSuchMethod(Invocation.method(#match, [query]),
              returnValue: _FakePostgrestFilterBuilder_9())
          as _i2.PostgrestFilterBuilder);
  @override
  _i2.PostgrestTransformBuilder<dynamic> select([String? columns = r'*']) =>
      (super.noSuchMethod(Invocation.method(#select, [columns]),
              returnValue: _FakePostgrestTransformBuilder_5<dynamic>())
          as _i2.PostgrestTransformBuilder<dynamic>);
  @override
  _i2.PostgrestTransformBuilder<dynamic> order(String? column,
          {bool? ascending = false,
          bool? nullsFirst = false,
          String? foreignTable}) =>
      (super.noSuchMethod(
              Invocation.method(#order, [
                column
              ], {
                #ascending: ascending,
                #nullsFirst: nullsFirst,
                #foreignTable: foreignTable
              }),
              returnValue: _FakePostgrestTransformBuilder_5<dynamic>())
          as _i2.PostgrestTransformBuilder<dynamic>);
  @override
  _i2.PostgrestTransformBuilder<dynamic> limit(int? count,
          {String? foreignTable}) =>
      (super.noSuchMethod(
              Invocation.method(#limit, [count], {#foreignTable: foreignTable}),
              returnValue: _FakePostgrestTransformBuilder_5<dynamic>())
          as _i2.PostgrestTransformBuilder<dynamic>);
  @override
  _i2.PostgrestTransformBuilder<dynamic> range(int? from, int? to,
          {String? foreignTable}) =>
      (super.noSuchMethod(
          Invocation.method(#range, [from, to], {#foreignTable: foreignTable}),
          returnValue:
              _FakePostgrestTransformBuilder_5<dynamic>()) as _i2
          .PostgrestTransformBuilder<dynamic>);
  @override
  _i2.PostgrestTransformBuilder<dynamic> single() =>
      (super.noSuchMethod(Invocation.method(#single, []),
              returnValue: _FakePostgrestTransformBuilder_5<dynamic>())
          as _i2.PostgrestTransformBuilder<dynamic>);
  @override
  _i2.PostgrestTransformBuilder<dynamic> maybeSingle() =>
      (super.noSuchMethod(Invocation.method(#maybeSingle, []),
              returnValue: _FakePostgrestTransformBuilder_5<dynamic>())
          as _i2.PostgrestTransformBuilder<dynamic>);
  @override
  _i2.PostgrestTransformBuilder<dynamic> csv() =>
      (super.noSuchMethod(Invocation.method(#csv, []),
              returnValue: _FakePostgrestTransformBuilder_5<dynamic>())
          as _i2.PostgrestTransformBuilder<dynamic>);
  @override
  _i7.Future<_i2.PostgrestResponse> execute(
          {bool? head = false, _i2.CountOption? count}) =>
      (super.noSuchMethod(
              Invocation.method(#execute, [], {#head: head, #count: count}),
              returnValue: Future<_i2.PostgrestResponse>.value(
                  _FakePostgrestResponse_11()))
          as _i7.Future<_i2.PostgrestResponse>);
  @override
  _i2.PostgrestResponse parseResponse(_i9.Response? response) =>
      (super.noSuchMethod(Invocation.method(#parseResponse, [response]),
          returnValue: _FakePostgrestResponse_11()) as _i2.PostgrestResponse);
  @override
  _i2.PostgrestResponse handleMaybeEmptyError(
          _i9.Response? response, _i2.PostgrestError? error) =>
      (super.noSuchMethod(
          Invocation.method(#handleMaybeEmptyError, [response, error]),
          returnValue: _FakePostgrestResponse_11()) as _i2.PostgrestResponse);
  @override
  void appendSearchParams(String? key, String? value) =>
      super.noSuchMethod(Invocation.method(#appendSearchParams, [key, value]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GoTrueClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoTrueClient extends _i1.Mock implements _i2.GoTrueClient {
  MockGoTrueClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.GoTrueApi get api => (super.noSuchMethod(Invocation.getter(#api),
      returnValue: _FakeGoTrueApi_12()) as _i5.GoTrueApi);
  @override
  set api(_i5.GoTrueApi? _api) =>
      super.noSuchMethod(Invocation.setter(#api, _api),
          returnValueForMissingStub: null);
  @override
  set currentUser(_i2.User? _currentUser) =>
      super.noSuchMethod(Invocation.setter(#currentUser, _currentUser),
          returnValueForMissingStub: null);
  @override
  set currentSession(_i2.Session? _currentSession) =>
      super.noSuchMethod(Invocation.setter(#currentSession, _currentSession),
          returnValueForMissingStub: null);
  @override
  bool get autoRefreshToken =>
      (super.noSuchMethod(Invocation.getter(#autoRefreshToken),
          returnValue: false) as bool);
  @override
  set autoRefreshToken(bool? _autoRefreshToken) => super.noSuchMethod(
      Invocation.setter(#autoRefreshToken, _autoRefreshToken),
      returnValueForMissingStub: null);
  @override
  Map<String, _i10.Subscription> get stateChangeEmitters =>
      (super.noSuchMethod(Invocation.getter(#stateChangeEmitters),
              returnValue: <String, _i10.Subscription>{})
          as Map<String, _i10.Subscription>);
  @override
  set stateChangeEmitters(
          Map<String, _i10.Subscription>? _stateChangeEmitters) =>
      super.noSuchMethod(
          Invocation.setter(#stateChangeEmitters, _stateChangeEmitters),
          returnValueForMissingStub: null);
  @override
  _i7.Future<_i2.GotrueSessionResponse> signUp(String? email, String? password,
          {_i2.AuthOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(#signUp, [email, password], {#options: options}),
          returnValue: Future<_i2.GotrueSessionResponse>.value(
              _FakeGotrueSessionResponse_13())) as _i7
          .Future<_i2.GotrueSessionResponse>);
  @override
  _i7.Future<_i2.GotrueSessionResponse> signUpWithPhone(
          String? phone, String? password, {_i2.AuthOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #signUpWithPhone, [phone, password], {#options: options}),
              returnValue: Future<_i2.GotrueSessionResponse>.value(
                  _FakeGotrueSessionResponse_13()))
          as _i7.Future<_i2.GotrueSessionResponse>);
  @override
  _i7.Future<_i2.GotrueSessionResponse> signIn(
          {String? email,
          String? phone,
          String? password,
          _i2.Provider? provider,
          _i2.AuthOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#signIn, [], {
                #email: email,
                #phone: phone,
                #password: password,
                #provider: provider,
                #options: options
              }),
              returnValue: Future<_i2.GotrueSessionResponse>.value(
                  _FakeGotrueSessionResponse_13()))
          as _i7.Future<_i2.GotrueSessionResponse>);
  @override
  _i7.Future<_i2.GotrueSessionResponse> verifyOTP(String? phone, String? token,
          {_i2.AuthOptions? options}) =>
      (super.noSuchMethod(
          Invocation.method(#verifyOTP, [phone, token], {#options: options}),
          returnValue: Future<_i2.GotrueSessionResponse>.value(
              _FakeGotrueSessionResponse_13())) as _i7
          .Future<_i2.GotrueSessionResponse>);
  @override
  _i7.Future<_i2.GotrueSessionResponse> refreshSession() =>
      (super.noSuchMethod(Invocation.method(#refreshSession, []),
              returnValue: Future<_i2.GotrueSessionResponse>.value(
                  _FakeGotrueSessionResponse_13()))
          as _i7.Future<_i2.GotrueSessionResponse>);
  @override
  _i7.Future<_i2.GotrueSessionResponse> setSession(String? refreshToken) =>
      (super.noSuchMethod(Invocation.method(#setSession, [refreshToken]),
              returnValue: Future<_i2.GotrueSessionResponse>.value(
                  _FakeGotrueSessionResponse_13()))
          as _i7.Future<_i2.GotrueSessionResponse>);
  @override
  _i2.Session setAuth(String? accessToken) =>
      (super.noSuchMethod(Invocation.method(#setAuth, [accessToken]),
          returnValue: _FakeSession_14()) as _i2.Session);
  @override
  _i7.Future<_i2.GotrueSessionResponse> getSessionFromUrl(Uri? originUrl,
          {bool? storeSession = true}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getSessionFromUrl, [originUrl], {#storeSession: storeSession}),
          returnValue: Future<_i2.GotrueSessionResponse>.value(
              _FakeGotrueSessionResponse_13())) as _i7
          .Future<_i2.GotrueSessionResponse>);
  @override
  _i7.Future<_i2.GotrueUserResponse> update(_i2.UserAttributes? attributes) =>
      (super.noSuchMethod(Invocation.method(#update, [attributes]),
              returnValue: Future<_i2.GotrueUserResponse>.value(
                  _FakeGotrueUserResponse_15()))
          as _i7.Future<_i2.GotrueUserResponse>);
  @override
  _i7.Future<_i2.GotrueResponse> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
              returnValue:
                  Future<_i2.GotrueResponse>.value(_FakeGotrueResponse_16()))
          as _i7.Future<_i2.GotrueResponse>);
  @override
  _i2.GotrueSubscription onAuthStateChange(_i10.Callback? callback) =>
      (super.noSuchMethod(Invocation.method(#onAuthStateChange, [callback]),
          returnValue: _FakeGotrueSubscription_17()) as _i2.GotrueSubscription);
  @override
  _i7.Future<_i2.GotrueSessionResponse> recoverSession(String? jsonStr) =>
      (super.noSuchMethod(Invocation.method(#recoverSession, [jsonStr]),
              returnValue: Future<_i2.GotrueSessionResponse>.value(
                  _FakeGotrueSessionResponse_13()))
          as _i7.Future<_i2.GotrueSessionResponse>);
  @override
  String toString() => super.toString();
}
